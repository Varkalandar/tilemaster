/*
 * File: PaletteEditor.java
 * Creation: 2010_06_04
 * Author: Hj. Malthaner <h_malthaner@users.sourceforge.net>
 * License: See license.txt
 */

package tilemaster.editor.colors;

import asktools.ColorPalette;
import asktools.ColorPaletteInterface;
import java.awt.Color;

/**
 * A simple color map (palette) editor panel.
 * 
 * @author Hj. Malthaner
 */
public class PaletteEditor extends javax.swing.JPanel implements ColorPaletteInterface
{
    private static Tool tool;

    private Color [] pushArray;

    private ColorPalette colorPalette;
    private ColorPaletteInterface callback;

    public void addColorListener(ColorPaletteInterface cpi)
    {
        callback = cpi;
    }

    public void setColors(Color [] colors)
    {
        colorPalette.setColors(colors);
    }

    public Color [] getColors()
    {
        return colorPalette.getColors();
    }


    /** 
     * Creates new form PaletteEditor
     */
    public PaletteEditor()
    {
        initComponents();

        colorPalette = new ColorPalette(this, 24);
        colorPalette.setLocation(60, 0);
        colorPalette.setSize(colorPalette.getPreferredSize());

        add(colorPalette);

        helpField.setText("Select operation.");

        popRangeButton.setEnabled(tool != null && tool instanceof RangeBuffer);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editButton = new javax.swing.JButton();
        rangeButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        helpField = new javax.swing.JTextField();
        pushRangeButton = new javax.swing.JButton();
        popRangeButton = new javax.swing.JButton();

        setLayout(null);

        editButton.setText("Edit Color");
        editButton.setToolTipText("Edit the color values");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        add(editButton);
        editButton.setBounds(240, 240, 112, 23);

        rangeButton.setText("Create Range");
        rangeButton.setToolTipText("Create a color range");
        rangeButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        rangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeButtonActionPerformed(evt);
            }
        });
        add(rangeButton);
        rangeButton.setBounds(8, 240, 112, 23);

        copyButton.setText("Copy Range");
        copyButton.setToolTipText("Copy color range within the palette");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        add(copyButton);
        copyButton.setBounds(124, 240, 112, 23);

        helpField.setDisabledTextColor(new java.awt.Color(0, 102, 204));
        helpField.setEnabled(false);
        add(helpField);
        helpField.setBounds(16, 295, 328, 30);

        pushRangeButton.setText("Push Range");
        pushRangeButton.setToolTipText("Copy a color range to a buffer");
        pushRangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushRangeButtonActionPerformed(evt);
            }
        });
        add(pushRangeButton);
        pushRangeButton.setBounds(8, 266, 112, 23);

        popRangeButton.setText("Pop Range");
        popRangeButton.setToolTipText("Restore the color range from the push buffer to a selectable position in the palette");
        popRangeButton.setEnabled(false);
        popRangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popRangeButtonActionPerformed(evt);
            }
        });
        add(popRangeButton);
        popRangeButton.setBounds(124, 266, 112, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void rangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeButtonActionPerformed
        tool = new Range();
        helpField.setText("Select first color for range.");
        popRangeButton.setEnabled(false);        
    }//GEN-LAST:event_rangeButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        tool = new Copy();
        helpField.setText("Select starting color for copy.");
        popRangeButton.setEnabled(false);
    }//GEN-LAST:event_copyButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        helpField.setText("Select operation.");
        colorPalette.editSelectedColor();
        callback.onColorSelected(colorPalette.getSelectedForeground());
        popRangeButton.setEnabled(false);
    }//GEN-LAST:event_editButtonActionPerformed

    private void pushRangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushRangeButtonActionPerformed
        tool = new RangeBuffer();
        helpField.setText("Select first color of the range to store in the push buffer.");
        popRangeButton.setEnabled(true);
    }//GEN-LAST:event_pushRangeButtonActionPerformed

    private void popRangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popRangeButtonActionPerformed

        helpField.setText("Select destination position for the range to restore.");
    }//GEN-LAST:event_popRangeButtonActionPerformed

    @Override
    public void onColorSelected(int colorIndex)
    {
        // Color color = colorPalette.getColor(colorIndex);

        if(tool != null) {
            tool.onColorSelected(colorIndex, colorPalette);
        }
        callback.onColorSelected(colorIndex);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField helpField;
    private javax.swing.JButton popRangeButton;
    private javax.swing.JButton pushRangeButton;
    private javax.swing.JButton rangeButton;
    // End of variables declaration//GEN-END:variables


    private interface Tool
    {
        public void onColorSelected(int colorIndex, ColorPalette colorPalette);
    };

    private class Range implements Tool
    {
        int count = 0;
        int indices [] = new int [2];

        @Override
        public void onColorSelected(int colorIndex, ColorPalette colorPalette)
        {
            indices[count ++] = colorIndex;

            if(count == 1) {
                helpField.setText("Select last color for range.");
            }
            if(count == 2) {
                count = 0;
                Color start = colorPalette.getColor(indices[0]);
                Color end = colorPalette.getColor(indices[1]);

                double rv = end.getRed() - start.getRed();
                double gv = end.getGreen() - start.getGreen();
                double bv = end.getBlue() - start.getBlue();

                final int w = indices[1] - indices[0];

                for(int i = 0; i<w; i++) {
                    Color color = new Color(
                            start.getRed() + (int)(rv * i / w + 0.5),
                            start.getGreen() + (int)(gv * i / w + 0.5),
                            start.getBlue() + (int)(bv * i / w + 0.5)                            
                            );

                    colorPalette.setColor(indices[0] + i, color);
                }
                helpField.setText("Range done. Select operation.");
            }
        }
    }

    private class Copy implements Tool
    {
        int count = 0;
        int indices [] = new int [3];

        @Override
        public void onColorSelected(int colorIndex, ColorPalette colorPalette)
        {
            indices[count ++] = colorIndex;

            if(count == 1) {
                helpField.setText("Select last color for copy.");
            }
            if(count == 2) {
                pushArray = new Color[indices[1] - indices[0] + 1];
                for(int i = indices[0]; i<=indices[1]; i++) {
                    pushArray[i - indices[0]] = colorPalette.getColor(i);
                }
                helpField.setText("Select destination for copy.");
            }
            if(count == 3) {
                count = 0;
                for(int i = 0; i<pushArray.length; i++) {
                    colorPalette.setColor(indices[2] + i, pushArray[i]);
                }
                helpField.setText("Copy done. Select operation.");
            }
        }
    }

    private class RangeBuffer implements Tool
    {
        int count = 0;
        int indices [] = new int [3];

        @Override
        public void onColorSelected(int colorIndex, ColorPalette colorPalette)
        {
            indices[count ++] = colorIndex;

            if(count == 1) {
                helpField.setText("Select the last color of the range to store.");
            }
            if(count == 2) {
                pushArray = new Color[indices[1] - indices[0] + 1];
                for(int i = indices[0]; i<=indices[1]; i++) {
                    pushArray[i - indices[0]] = colorPalette.getColor(i);
                }
                helpField.setText("Push buffer filled. Select a destination to copy to.");
            }
            if(count >= 3) {
                count = 2;
                for(int i = 0; i<pushArray.length; i++) {
                    colorPalette.setColor(indices[2] + i, pushArray[i]);
                }
                helpField.setText("Copy done. Select another destination to copy to.");
            }
        }
    }

}
